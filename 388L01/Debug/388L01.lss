
388L01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000001fa  0000028e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800106  00800106  00000294  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a8c  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000981  00000000  00000000  00000db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000329  00000000  00000000  00001739  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001a64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049f  00000000  00000000  00001ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  00001f57  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001fba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_13>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ea ef       	ldi	r30, 0xFA	; 250
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a6 30       	cpi	r26, 0x06	; 6
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a6 e0       	ldi	r26, 0x06	; 6
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a8 30       	cpi	r26, 0x08	; 8
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  ea:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <__vector_13>:

int timermode = 0;
int times[] = {-6250, -3125, -31250};

ISR(TIMER1_OVF_vect)
{
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
 100:	ef 93       	push	r30
 102:	ff 93       	push	r31
	TCNT1 = times[timermode];	// set frequency
 104:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <__data_end>
 108:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <__data_end+0x1>
 10c:	ee 0f       	add	r30, r30
 10e:	ff 1f       	adc	r31, r31
 110:	e0 50       	subi	r30, 0x00	; 0
 112:	ff 4f       	sbci	r31, 0xFF	; 255
 114:	80 81       	ld	r24, Z
 116:	91 81       	ldd	r25, Z+1	; 0x01
 118:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 11c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	PORTB ^= (1 << PORTB5);		// toggle LED on overflow
 120:	95 b1       	in	r25, 0x05	; 5
 122:	80 e2       	ldi	r24, 0x20	; 32
 124:	89 27       	eor	r24, r25
 126:	85 b9       	out	0x05, r24	; 5
}
 128:	ff 91       	pop	r31
 12a:	ef 91       	pop	r30
 12c:	9f 91       	pop	r25
 12e:	8f 91       	pop	r24
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <main>:


int main(void)
{
	DDRB = (1 << PORTB5);		// set LED to output
 13a:	80 e2       	ldi	r24, 0x20	; 32
 13c:	84 b9       	out	0x04, r24	; 4
	TCNT1 = -1;					// let timer quickly overflow (set to proper freq)
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	9f ef       	ldi	r25, 0xFF	; 255
 142:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 146:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	TCCR1A = 0;
 14a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (0b100 << CS10);	// prescale 256
 14e:	84 e0       	ldi	r24, 0x04	; 4
 150:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 = 1 << TOIE1;		// overflow timer
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	sei();
 15a:	78 94       	sei
		if( (PINB & (1 << PINB7)) == 0)			// pin 7 pressed?
		{
			_delay_ms(1);						// prevent switch boucing
			while( (PINB & (1 << PINB7)) == 0)	// debounce (do nothing until button is released, only works with single button)
				;
			timermode = (timermode + 1) % 3;	// change active frequency
 15c:	c3 e0       	ldi	r28, 0x03	; 3
 15e:	d0 e0       	ldi	r29, 0x00	; 0
			TCNT1 = -1;							// cause overflow, skip rest of current cycle
 160:	e4 e8       	ldi	r30, 0x84	; 132
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	2f ef       	ldi	r18, 0xFF	; 255
 166:	3f ef       	ldi	r19, 0xFF	; 255
	TIMSK1 = 1 << TOIE1;		// overflow timer
	sei();
	
	while(1)
	{
		if( (PINB & (1 << PINB7)) == 0)			// pin 7 pressed?
 168:	1f 99       	sbic	0x03, 7	; 3
 16a:	fe cf       	rjmp	.-4      	; 0x168 <main+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	8f e9       	ldi	r24, 0x9F	; 159
 16e:	9f e0       	ldi	r25, 0x0F	; 15
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <main+0x36>
 174:	00 c0       	rjmp	.+0      	; 0x176 <main+0x3c>
 176:	00 00       	nop
		{
			_delay_ms(1);						// prevent switch boucing
			while( (PINB & (1 << PINB7)) == 0)	// debounce (do nothing until button is released, only works with single button)
 178:	1f 9b       	sbis	0x03, 7	; 3
 17a:	fe cf       	rjmp	.-4      	; 0x178 <main+0x3e>
				;
			timermode = (timermode + 1) % 3;	// change active frequency
 17c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 180:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	be 01       	movw	r22, r28
 188:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <__divmodhi4>
 18c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 190:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
			TCNT1 = -1;							// cause overflow, skip rest of current cycle
 194:	31 83       	std	Z+1, r19	; 0x01
 196:	20 83       	st	Z, r18
 198:	8f e9       	ldi	r24, 0x9F	; 159
 19a:	9f e0       	ldi	r25, 0x0F	; 15
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <main+0x62>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0x68>
 1a2:	00 00       	nop
 1a4:	e1 cf       	rjmp	.-62     	; 0x168 <main+0x2e>

000001a6 <__divmodhi4>:
 1a6:	97 fb       	bst	r25, 7
 1a8:	07 2e       	mov	r0, r23
 1aa:	16 f4       	brtc	.+4      	; 0x1b0 <__divmodhi4+0xa>
 1ac:	00 94       	com	r0
 1ae:	07 d0       	rcall	.+14     	; 0x1be <__divmodhi4_neg1>
 1b0:	77 fd       	sbrc	r23, 7
 1b2:	09 d0       	rcall	.+18     	; 0x1c6 <__divmodhi4_neg2>
 1b4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <__udivmodhi4>
 1b8:	07 fc       	sbrc	r0, 7
 1ba:	05 d0       	rcall	.+10     	; 0x1c6 <__divmodhi4_neg2>
 1bc:	3e f4       	brtc	.+14     	; 0x1cc <__divmodhi4_exit>

000001be <__divmodhi4_neg1>:
 1be:	90 95       	com	r25
 1c0:	81 95       	neg	r24
 1c2:	9f 4f       	sbci	r25, 0xFF	; 255
 1c4:	08 95       	ret

000001c6 <__divmodhi4_neg2>:
 1c6:	70 95       	com	r23
 1c8:	61 95       	neg	r22
 1ca:	7f 4f       	sbci	r23, 0xFF	; 255

000001cc <__divmodhi4_exit>:
 1cc:	08 95       	ret

000001ce <__udivmodhi4>:
 1ce:	aa 1b       	sub	r26, r26
 1d0:	bb 1b       	sub	r27, r27
 1d2:	51 e1       	ldi	r21, 0x11	; 17
 1d4:	07 c0       	rjmp	.+14     	; 0x1e4 <__udivmodhi4_ep>

000001d6 <__udivmodhi4_loop>:
 1d6:	aa 1f       	adc	r26, r26
 1d8:	bb 1f       	adc	r27, r27
 1da:	a6 17       	cp	r26, r22
 1dc:	b7 07       	cpc	r27, r23
 1de:	10 f0       	brcs	.+4      	; 0x1e4 <__udivmodhi4_ep>
 1e0:	a6 1b       	sub	r26, r22
 1e2:	b7 0b       	sbc	r27, r23

000001e4 <__udivmodhi4_ep>:
 1e4:	88 1f       	adc	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	5a 95       	dec	r21
 1ea:	a9 f7       	brne	.-22     	; 0x1d6 <__udivmodhi4_loop>
 1ec:	80 95       	com	r24
 1ee:	90 95       	com	r25
 1f0:	bc 01       	movw	r22, r24
 1f2:	cd 01       	movw	r24, r26
 1f4:	08 95       	ret

000001f6 <_exit>:
 1f6:	f8 94       	cli

000001f8 <__stop_program>:
 1f8:	ff cf       	rjmp	.-2      	; 0x1f8 <__stop_program>
